(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{74:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"小谈-javascript-的-if-语句写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小谈-javascript-的-if-语句写法","aria-hidden":"true"}},[t._v("#")]),t._v(" 小谈 JavaScript 的 if 语句写法")]),a("blockquote",[a("p",[t._v("马克思政治经济学认为，在生产资料中，起最重要作用的是生产工具，它是社会生产力发展水平和发展状况的最主要标志。")])]),a("p",[t._v("昨天小鱼发了一条"),a("a",{attrs:{href:"http://www.weibo.com/1639517374/CnTE9fABs",target:"_blank",rel:"noopener noreferrer"}},[t._v("微博")]),t._v("：")]),a("blockquote",[a("p",[t._v("使用了一段时间常量前置的写法，感觉还是不习惯，有谁一直在用么？比如 "),a("code",[t._v("if('str' === str) blah();")])])]),a("p",[t._v("这是一种古老的用法，也曾被一些人当作最佳实践。这条微博下面的回复几乎都是赞同这种写法的，只有个别人表示反对。过去我或许也会赞同，然而现在我会明确地表示反对这种写法。为什么？我们还是先来说说这种写法出现的缘由。")]),a("p",[t._v("通常，我们会这样写 JavaScript 的 "),a("code",[t._v("if")]),t._v(" 语句：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'another'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("是人都会出错。有时候我们会不小心把比较操作符（"),a("code",[t._v("===")]),t._v(" 或 "),a("code",[t._v("==")]),t._v("）错写成赋值操作符（"),a("code",[t._v("=")]),t._v("）：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'another'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("这样一来条件表达式就变成了赋值表达式，这相当于：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("one "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'another'")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("one"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("这段代码完全偏离了我们原本的设想。然而要命的是，它又完全合法！在测试覆盖不够的情况下，你甚至可能发现不了这个问题……直到出现线上 bug。小小的错误，也会给我们带来很大的麻烦。")]),a("p",[t._v("因此，有聪明人想了一个办法，把比较操作符的两边调换一下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'another'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" one"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("这样一来，一旦再出现写错操作符的情况：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'another'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" one"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("由于 "),a("code",[t._v("'another' = one")]),t._v(" 是一个非法的赋值表达式，浏览器就会报错，程序功能就会挂掉——我们能够立刻发现问题。")]),a("p",[t._v("应该说，这是一种工程上的进步，我确实如此认为——代码变得更易于调试了。然而，经过最近几年炒得火热的前端工程化（工具化）浪潮，各种各样的前端工具越来越丰富。我们在工程上有了更多更好的选择，我认为这样的古法已经不再有必要。")]),a("p",[t._v("以我最常用的 "),a("a",{attrs:{href:"http://jshint.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSHint")]),t._v(" 为例，它有一个 "),a("a",{attrs:{href:"http://jshint.com/docs/options/#boss",target:"_blank",rel:"noopener noreferrer"}},[t._v("boss")]),t._v(" 选项是这么说的：")]),a("blockquote",[a("p",[t._v("This option suppresses warnings about the use of assignments in cases where comparisons are expected. More often than not, code like "),a("code",[t._v("if (a = 10) {}")]),t._v(" is a typo.")])]),a("p",[t._v("所以，只要禁用这个选项—— "),a("code",[t._v("boss: false")]),t._v(" ——就可以避免我们上面提到的笔误问题。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2015/06/jshint-error.png",alt:"boss: false"}})]),a("p",[t._v("就这样？就这样！")]),a("p",[t._v("如同“写不写分号”、“一个 "),a("code",[t._v("var")]),t._v(" 还是多个 "),a("code",[t._v("var")]),t._v("”，这也是一个很小的问题。然而很多小的问题累积起来，往往折射的是观念。好的工具摆在面前，我们应该好好利用它。坚持用人力替代工具，这不太妙。")]),a("p",[t._v("// 请再读一遍本文的第一段。")])])}],!1,null,null,null);s.default=e.exports}}]);