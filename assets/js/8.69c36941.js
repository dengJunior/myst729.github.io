(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{97:function(t,s,e){"use strict";e.r(s);var n=e(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"你的第一个-visual-studio-code-扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你的第一个-visual-studio-code-扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 你的第一个 Visual Studio Code 扩展")]),e("blockquote",[e("p",[t._v("本文翻译自 Visual Studio Code 官方文档 "),e("a",{attrs:{href:"https://code.visualstudio.com/Docs/extensions/example-hello-world",target:"_blank",rel:"noopener noreferrer"}},[t._v("Example - Hello World")]),t._v("。Visual Studio Code（以下简称 VS Code）是微软基于 Electron 开发的代码编辑器，详情请自行搜索，在此不赘述。")])]),e("p",[t._v("本文将指导你创建一个 VS Code 扩展（Hello World），并讲解 VS Code 扩展性的基本概念。")]),e("p",[t._v("在这篇教程中，你将为 VS Code 添加一个新指令，显示一条简单的“Hello World”信息。接下来还会和 VS Code 编辑器交互，查询用户选中的文本。")]),e("h2",{attrs:{id:"准备工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备工作","aria-hidden":"true"}},[t._v("#")]),t._v(" 准备工作")]),e("p",[t._v("请安装 "),e("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("node.js")]),t._v(" 并将其添加到系统环境变量 "),e("code",[t._v("$PATH")]),t._v("。")]),e("h2",{attrs:{id:"创建新扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建新扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建新扩展")]),e("p",[t._v("要为 VS Code 增加功能，最简单的方式是添加指令。指令会注册一个回调函数，可以通过指令面板或快捷键调用。")]),e("p",[t._v("为了帮助你开始，我们编写了一个 Yeoman 生成器。安装 Yeoman 和 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/tools/yocode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yeoman VS Code Extension generator")]),t._v("，创建一个新扩展：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" -g yo generator-code\nyo code\n")])]),e("p",[t._v("这个扩展既可以用 "),e("strong",[t._v("TypeScript")]),t._v(" 编写，也可以用 "),e("strong",[t._v("JavaScript")]),t._v("。在这个示例中，我们选择 "),e("strong",[t._v("TypeScript")]),t._v("。")]),e("p",[e("img",{attrs:{src:"/blog/images/2016/01/vscode-extension-generator.png",alt:"指令生成器"}})]),e("h2",{attrs:{id:"运行你的扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行你的扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 运行你的扩展")]),e("ul",[e("li",[t._v("启动 VS Code，选择 "),e("code",[t._v("File")]),t._v(" > "),e("code",[t._v("Open...")]),t._v("，打开刚才生成的文件夹；")]),e("li",[t._v("按 "),e("kbd",[t._v("F5")]),t._v("，或点击 "),e("code",[t._v("Debug")]),t._v(" 图标，然后点击 "),e("code",[t._v("Start")]),t._v("；")]),e("li",[t._v("VS Code 将以“扩展开发”模式启动一个新的实例，"),e("strong",[t._v("这个实例将启用你正在开发的扩展")]),t._v("；")]),e("li",[t._v("按 "),e("kbd",[t._v("F1")]),t._v("，执行 "),e("code",[t._v("Hello World")]),t._v(" 指令；")]),e("li",[t._v("恭喜！你刚刚创建并执行了你的第一个 VS Code 指令！")])]),e("p",[e("img",{attrs:{src:"/blog/images/2016/01/vscode-extension-running.png",alt:"在 VS Code 中运行扩展"}})]),e("h2",{attrs:{id:"扩展的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展的结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展的结构")]),e("p",[t._v("使用 Yeoman 生成器生成的扩展结构如下：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".\n├── .gitignore\n├── .vscode                     // VS Code 集成\n│   ├── launch.json\n│   ├── settings.json\n│   └── tasks.json\n├── .vscodeignore\n├── README.md\n├── src                         // 源代码\n│   └── extension.ts            // 如果是 JavaScript 扩展则为 extension.js\n├── test                        // 测试\n│   ├── extension.test.ts       // 如果是 JavaScript 扩展则为 extension.test.js\n│   └── index.ts                // 如果是 JavaScript 扩展则为 index.js\n├── node_modules\n│   ├── vscode                  // 语言服务\n│   └── typescript              // TypeScript 编译器（针对 TypeScript 扩展）\n├── out                         // 编译输出（针对 TypeScript 扩展）\n│   ├── src\n│   │   ├── extension.js\n│   │   └── extension.js.map\n│   └── test\n│       ├── extension.test.js\n│       ├── extension.test.js.map\n│       ├── index.js\n│       └── index.js.map\n├── package.json                // 扩展清单\n├── tsconfig.json               // 如果是 JavaScript 扩展则为 jsconfig.json\n├── typings                     // 类型定义文件\n│   ├── node.d.ts               // Node.js API 链接\n│   └── vscode-typings.d.ts     // VS Code API 链接\n└── vsc-extension-quickstart.md // 扩展开发快速上手指南\n")])]),e("p",[t._v("我们来挨个看看这些文件的用途：")]),e("h4",{attrs:{id:"扩展清单：package-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展清单：package-json","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展清单："),e("code",[t._v("package.json")])]),e("ul",[e("li",[t._v("请阅读 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensionAPI/extension-manifest",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("package.json")]),t._v(" 扩展清单参考")]),t._v("；")]),e("li",[t._v("更多信息见 "),e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensionAPI/extension-points",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("package.json")]),t._v(" 的构造")]),t._v("；")]),e("li",[t._v("每个 VS Code 扩展都必须包含一个描述扩展及其功能的 "),e("code",[t._v("package.json")]),t._v(" 文件；")]),e("li",[t._v("VS Code 会在启动时读取这个文件，并对每个部分立刻做出响应。")])]),e("p",[e("strong",[t._v("TypeScript 扩展的清单示例")])]),e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"name"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"myFirstExtension"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"description"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('""')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"version"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"0.0.1"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"publisher"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('""')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"engines"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"vscode"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"^0.10.1"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"categories"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{attrs:{class:"token string"}},[t._v('"Other"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"activationEvents"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{attrs:{class:"token string"}},[t._v('"onCommand:extension.sayHello"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"main"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"./out/src/extension"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"contributes"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"commands"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{attrs:{class:"token property"}},[t._v('"command"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"extension.sayHello"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{attrs:{class:"token property"}},[t._v('"title"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n        "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"vscode:prepublish"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"node ./node_modules/vscode/bin/compile"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"compile"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"node ./node_modules/vscode/bin/compile -watch -p ./"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token property"}},[t._v('"devDependencies"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"typescript"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"^1.6.2"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{attrs:{class:"token property"}},[t._v('"vscode"')]),e("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"0.10.x"')]),t._v("\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),e("blockquote",[e("p",[e("strong",[t._v("笔记：")]),t._v(" JavaScript 扩展不需要编译，因此不必填写 "),e("code",[t._v("scripts")]),t._v(" 字段。")])]),e("ul",[e("li",[t._v("这个 package.json 对扩展作出如下描述：")]),e("li",[t._v("在指令面板（"),e("kbd",[t._v("F1")]),t._v("）定义了一个可调用指令 "),e("code",[t._v('"extension.sayHello"')]),t._v(" 的入口 "),e("code",[t._v('"Hello world"')]),t._v("；")]),e("li",[t._v("调用指令 "),e("code",[t._v('"extension.sayHello"')]),t._v(" 时加载（"),e("code",[t._v("activationEvents")]),t._v("）；")]),e("li",[t._v("JavaScript 代码的主文件是 "),e("code",[t._v('"./out/src/extension.js"')]),t._v("。")])]),e("blockquote",[e("p",[e("strong",[t._v("笔记：")]),t._v(" VS Code "),e("strong",[t._v("不会")]),t._v("在启动时主动加载扩展。扩展必须通过 "),e("code",[t._v("activationEvents")]),t._v(" 属性声明其激活（加载）条件。")])]),e("h4",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码")]),e("p",[t._v("生成的扩展代码在 "),e("code",[t._v("extension.ts")]),t._v("（如果是 JavaScript 扩展则为 "),e("code",[t._v("extension.js")]),t._v("）文件中：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 'vscode' 模块包含了 VS Code 扩展 API\n// 以 vscode 为标识符引入这个模块\nimport * as vscode from 'vscode';\n\n// 扩展激活时会调用这个方法\n// 扩展会在指令首次执行时激活\nexport function activate(context: vscode.ExtensionContext) {\n\n    // 在控制台输出诊断信息（console.log）和错误（console.error）\n    // 这行代码只会在扩展激活时执行一次\n    console.log('Congratulations, your extension \"my-first-extension\" is now active!');\n\n    // 指令已经在 package.json 文件中定义了\n    // 现在通过 registerCommand 方法给出指令的实现\n    // commandId 参数必须与 package.json 文件中的 command 字段对应\n    var disposable = vscode.commands.registerCommand('extension.sayHello', () => {\n        // 每次执行指令时，都会执行这里的代码\n\n        // 显示一条消息\n        vscode.window.showInformationMessage('Hello World!');\n    });\n    \n    context.subscriptions.push(disposable);\n}\n")])]),e("ul",[e("li",[t._v("每一个扩展都要从主文件导出一个 "),e("code",[t._v("activate()")]),t._v(" 函数，它"),e("strong",[t._v("只会被 VS Code 调用一次")]),t._v("，即 "),e("code",[t._v("package.json")]),t._v(" 文件中描述的 "),e("code",[t._v("activationEvents")]),t._v(" 发生时；")]),e("li",[t._v("如果一个扩展使用了操作系统资源（比如生成进程），可以从主文件导出一个执行清理工作的 "),e("code",[t._v("deactivate()")]),t._v(" 函数，VS Code 会在关闭时调用这个它；")]),e("li",[t._v("这个扩展引入了 "),e("code",[t._v("vscode")]),t._v(" API，然后注册了一个指令，并关联了一个函数。该函数会在指令 "),e("code",[t._v('"extension.sayHello"')]),t._v(" 被调用时执行。指令的实现会在 VS Code 中显示一条“Hello world”消息。")])]),e("blockquote",[e("p",[e("strong",[t._v("笔记：")]),e("code",[t._v("package.json")]),t._v(" 文件的 "),e("code",[t._v("contributes")]),t._v(" 部分会在指令面板中添加入口。"),e("code",[t._v("extension.ts/.js")]),t._v(" 则定义了 "),e("code",[t._v('"extension.sayHello"')]),t._v(" 的实现。")])]),e("blockquote",[e("p",[e("strong",[t._v("笔记：")]),t._v(" 对于 TypeScript 扩展，VS Code 会在运行时加载并执行生成的 "),e("code",[t._v("out/src/extension.js")]),t._v(" 文件。")])]),e("h4",{attrs:{id:"其他文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他文件")]),e("ul",[e("li",[e("code",[t._v(".vscode/launch.json")]),t._v(" 定义了 VS Code 将以扩展开发模式启动。它还通过 "),e("code",[t._v("preLaunchTask")]),t._v(" 指向 "),e("code",[t._v(".vscode/tasks.json")]),t._v(" 中定义的一个运行 TypeScript 编译器的任务；")]),e("li",[e("code",[t._v(".vscode/settings.json")]),t._v(" 默认不包含 "),e("code",[t._v("out")]),t._v(" 文件夹。你可以编辑想要隐藏的文件类型；")]),e("li",[e("code",[t._v(".gitignore")]),t._v(" 告诉 Git 要忽略哪些模式的文件；")]),e("li",[e("code",[t._v(".vscodeignore")]),t._v(" 告诉打包工具在发布扩展时要忽略哪些文件；")]),e("li",[e("code",[t._v("README.md")]),t._v(" 文件会向 VS Code 用户描述你的扩展；")]),e("li",[e("code",[t._v("vsc-extension-quickstart.md")]),t._v(" 文件是一个快速上手指南；")]),e("li",[t._v("你可以把扩展的单元测试放进 "),e("code",[t._v("test/extension.test.ts")]),t._v("，通过 VS Code API 运行测试（请阅读"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensions/testing-extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("测试你的扩展")]),t._v("）。")])]),e("h2",{attrs:{id:"运行你的扩展-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行你的扩展-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 运行你的扩展")]),e("p",[t._v("现在我们把扩展中包含的这些文件都搞清楚了，接下来就是扩展如何被激活：")]),e("ul",[e("li",[t._v("扩展开发实例会找到扩展并读取它的 "),e("code",[t._v("package.json")]),t._v(" 文件；")]),e("li",[t._v("当你按 "),e("kbd",[t._v("F1")]),t._v(" 时，已注册的指令会显示在指令面板中；")]),e("li",[t._v("现在这个列表里有一个 "),e("code",[t._v('"Hello world"')]),t._v(" 入口，是在 "),e("code",[t._v("package.json")]),t._v(" 中定义的；")]),e("li",[t._v("选择这个 "),e("code",[t._v('"Hello world"')]),t._v(" 指令时，"),e("code",[t._v('"extension.sayHello"')]),t._v(" 指令将被调用：\n"),e("ul",[e("li",[t._v("创建激活事件 "),e("code",[t._v('"onCommand:extension.sayHello"')]),t._v("；")]),e("li",[t._v("所有在其 "),e("code",[t._v("activationEvents")]),t._v(" 中列出这个激活事件的扩展都将被激活；\n"),e("ul",[e("li",[e("code",[t._v("./out/src/extension.js")]),t._v(" 文件被载入 JavaScript 虚拟机；")]),e("li",[t._v("VS Code 从中找到导出的 "),e("code",[t._v("activate")]),t._v(" 函数并调用它；")]),e("li",[t._v("注册 "),e("code",[t._v('"extension.sayHello"')]),t._v(" 指令并定义其实现；")])])])])]),e("li",[e("code",[t._v('"extension.sayHello"')]),t._v(" 指令的实现函数将被调用；")]),e("li",[t._v("指令的实现会显示一条“Hello World”消息。")])]),e("h2",{attrs:{id:"调试扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 调试扩展")]),e("p",[t._v("在注册的指令中设置一个断点，然后在 VS Code 的扩展开发实例中运行 "),e("code",[t._v('"Hello World"')]),t._v(" 指令。")]),e("p",[e("img",{attrs:{src:"/blog/images/2016/01/vscode-extension-debug.png",alt:"调试扩展"}})]),e("blockquote",[e("p",[e("strong",[t._v("笔记：")]),t._v(" 由于 VS Code 调试器支持源码映射，因此对于 TypeScript 扩展，尽管 VS Code 加载并执行的是 "),e("code",[t._v("out/src/extension.js")]),t._v("，你还是可以借助源码映射文件 "),e("code",[t._v("out/src/extension.js.map")]),t._v(" 调试原始的 TypeScript 代码。")])]),e("blockquote",[e("p",[e("strong",[t._v("技巧：")]),t._v(" 调试控制台会显示你记录的所有消息。")])]),e("p",[t._v("进一步了解扩展"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensions/debugging-extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("开发环境")]),t._v("。")]),e("h2",{attrs:{id:"一点小变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一点小变化","aria-hidden":"true"}},[t._v("#")]),t._v(" 一点小变化")]),e("p",[t._v("在 "),e("code",[t._v("extension.ts")]),t._v("（如果是 JavaScript 扩展则为 "),e("code",[t._v("extension.js")]),t._v("）中，试着把 "),e("code",[t._v("extension.sayHello")]),t._v(" 指令的实现替换为显示编辑器中选中的字符数：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var editor = vscode.window.activeTextEditor;\nif (!editor) {\n    return; // 没有打开编辑器\n}\n\nvar selection = editor.selection;\nvar text = editor.document.getText(selection);\n\n// 显示一条消息\nvscode.window.showInformationMessage('Selected characters: ' + text.length);\n")])]),e("blockquote",[e("p",[e("strong",[t._v("技巧：")]),t._v(" 修改了扩展源代码后，需要重启 VS Code 的扩展开发实例。你可以点击 VS Code 主实例顶部的 Restart 按钮，或在副实例中按 "),e("kbd",[t._v("Ctrl")]),t._v("+"),e("kbd",[t._v("R")]),t._v("（Mac："),e("kbd",[t._v("Cmd")]),t._v("+"),e("kbd",[t._v("R")]),t._v("）。")])]),e("p",[e("img",{attrs:{src:"/blog/images/2016/01/vscode-extension-selection-length.png",alt:"运行改进的扩展"}})]),e("h2",{attrs:{id:"本地安装扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地安装扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地安装扩展")]),e("p",[t._v("目前为止，你编写的扩展还只能在特殊的 VS Code 扩展开发实例中运行。把它复制到操作系统的扩展文件夹中，才能在所有的 VS Code 实例中运行：")]),e("ul",[e("li",[t._v("Windows："),e("code",[t._v("%USERPROFILE%\\.vscode\\extensions")])]),e("li",[t._v("Mac/Linux："),e("code",[t._v("$HOME/.vscode/extensions")])])]),e("h2",{attrs:{id:"发布你的扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布你的扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 发布你的扩展")]),e("p",[t._v("请阅读"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/tools/vscecli",target:"_blank",rel:"noopener noreferrer"}},[t._v("分享一个扩展")]),t._v("。")]),e("h2",{attrs:{id:"下一步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下一步","aria-hidden":"true"}},[t._v("#")]),t._v(" 下一步")]),e("p",[t._v("本文介绍了如何编写一个非常简单的扩展。"),e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensions/example-word-count",target:"_blank",rel:"noopener noreferrer"}},[t._v("单词计数器示例")]),t._v("是一个更详尽的示例，展示了如何针对特定的语言（Markdown），监听编辑器文档的变更事件。")]),e("p",[t._v("如果你想进一步了解扩展 API，可以阅读以下内容：")]),e("ul",[e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensionAPI/overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("扩展 API 概览")]),t._v(" - 全面了解 VS Code 的扩展性模型；")]),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensions/patterns-and-principles",target:"_blank",rel:"noopener noreferrer"}},[t._v("API 模式与原则")]),t._v(" - VS Code 扩展性所遵循的指导性模式与原则；")]),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensionAPI/extension-points",target:"_blank",rel:"noopener noreferrer"}},[t._v("构造")]),t._v(" - 深入了解 VS Code 的构造；")]),e("li",[e("a",{attrs:{href:"https://code.visualstudio.com/docs/extensionAPI/activation-events",target:"_blank",rel:"noopener noreferrer"}},[t._v("激活事件")]),t._v(" - VS Code 激活事件参考。")])]),e("h2",{attrs:{id:"常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见问题")]),e("p",[t._v("暂无。")])])}],!1,null,null,null);s.default=o.exports}}]);