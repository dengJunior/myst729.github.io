(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{91:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"两种方法判断平面内的点是否在多边形内"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种方法判断平面内的点是否在多边形内","aria-hidden":"true"}},[t._v("#")]),t._v(" 两种方法判断平面内的点是否在多边形内")]),a("p",[t._v("前言：本文源于前几天看到的一条"),a("a",{attrs:{href:"http://weibo.com/1057676857/Adpfwwfsv",target:"_blank",rel:"noopener noreferrer"}},[t._v("微博")]),t._v("：")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/weibo.png",alt:"微博"}})]),a("p",[t._v("对于这种言论我并不赞同。我大学学的是化学，没有学习过计算机专业的课程，但我认为至少这个问题并不需要多么高端的计算机专业知识，只要中学数学没有全还给老师，就应该能给出至少一种解法。比如说，我就随便涂了一个多边形和一个点，现在我要找出一种通用的方法来判断这个点是不是在多边形内部（别告诉我用肉眼观察……）。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/problem.png",alt:"问题"}})]),a("p",[t._v("首先想到的一个解法是从这个点做一条射线，计算它跟多边形边界的交点个数，如果交点个数为奇数，那么点在多边形内部，否则点在多边形外。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/solution.png",alt:"思路"}})]),a("p",[t._v("这个结论很简单，那它是怎么来的？其实，对于平面内任意闭合曲线，我们都可以直观地认为，曲线把平面分割成了内、外两部分，其中“内”就是我们所谓的多边形区域。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/polygon.png",alt:"多边形"}})]),a("p",[t._v("基于这一认识，对于平面内任意一条直线，我们可以得出下面这些结论：")]),a("ol",[a("li",[t._v("直线穿越多边形边界时，有且只有两种情况："),a("strong",[t._v("进入")]),t._v("多边形或"),a("strong",[t._v("穿出")]),t._v("多边形。")]),a("li",[t._v("在不考虑非欧空间的情况下，直线不可能从内部再次进入多边形，或从外部再次穿出多边形，即连续两次穿越边界的情况必然成对。")]),a("li",[t._v("直线可以无限延伸，而闭合曲线包围的区域是有限的，因此最后一次穿越多边形边界，一定是穿出多边形，到达外部。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/cross.png",alt:"穿越"}})]),a("p",[t._v("现在回到我们最初的题目。假如我们从一个给定的点做射线，还可以得出下面两条结论：")]),a("ol",[a("li",[t._v("如果点在多边形内部，射线第一次穿越边界一定是穿出多边形。")]),a("li",[t._v("如果点在多边形外部，射线第一次穿越边界一定是进入多边形。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/first.png",alt:"首次穿越"}})]),a("p",[t._v("把上面这些结论综合起来，我们可以归纳出：")]),a("ol",[a("li",[t._v("当射线穿越多边形边界的次数为偶数时，所有"),a("strong",[t._v("第偶数次")]),t._v("（包括最后一次）穿越都是穿出，因此所有"),a("strong",[t._v("第奇数次")]),t._v("（包括第一次）穿越为穿入，由此可推断点在多边形外部。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/out.png",alt:"外部"}})]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("当射线穿越多边形边界的次数为奇数时，所有"),a("strong",[t._v("第奇数次")]),t._v("（包括第一次和最后一次）穿越都是穿出，由此可推断点在多边形内部。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/in.png",alt:"内部"}})]),a("p",[t._v("到这里，我们已经了解这个解法的思路了，下面接着看算法实现的一些具体问题和边界条件的处理。")]),a("ol",[a("li",[a("strong",[t._v("点在多边形的边上")])])]),a("p",[t._v("上面我们讲到，这个解法的主要思路就是计算射线穿越多边形边界的次数，那么对于点在多边形的边上这种特殊情况，射线出发的这一次，是否应该算作穿越呢？")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/side.png",alt:"边"}})]),a("p",[t._v("看了上面的图就会发现，不管算不算穿越，都会陷入两难的境地——同样落在多边形边上的点，可能会得到相反的结果。这显然是不正确的，因此对这种特殊情况需要特殊处理。")]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("点和多边形的顶点重合")])])]),a("p",[t._v("这其实是第一种情况的一个特例。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/angle.png",alt:"顶点"}})]),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("射线经过多边形顶点")])])]),a("p",[t._v("射线刚好经过多边形顶点的时候，应该算一次还是两次穿越？这种情况比前两种复杂，也是实现中的难点。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/corner.png",alt:"边"}})]),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("射线刚好经过多边形的一条边")])])]),a("p",[t._v("这是上一种情况的特例，也就是说，射线连续经过了多边形的两个相邻顶点。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/line.png",alt:"经过边"}})]),a("p",[a("strong",[t._v("解决方案：")])]),a("ol",[a("li",[a("p",[t._v("判断点是否在线上的方法有很多，比较简单直接的就是计算点与两个多边形顶点的连线斜率是否相等，中学数学都学过。")])]),a("li",[a("p",[t._v("点和多边形顶点重合的情况更简单，直接比较点的坐标就行了。")])]),a("li",[a("p",[t._v("顶点穿越看似棘手，其实我们换一个角度，思路会大不相同。先来回答一个问题，射线穿越一条线段需要什么前提条件？没错，就是线段两个端点分别在射线两侧。只要想通这一点，顶点穿越就迎刃而解了。这样一来，我们只需要规定被射线穿越的点都算作其中一侧。")])])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/divide.png",alt:"两侧"}})]),a("p",[t._v("如上图，假如我们规定"),a("strong",[t._v("射线经过的点都属于射线以上的一侧")]),t._v("，显然点 D 和发生顶点穿越的点 C 都位于射线 Y 的同一侧，所以射线 Y 其实并没有穿越 CD 这条边。而点 C 和点 B 则分别位于射线 Y 的两侧，所以射线 Y 和 BC 发生了穿越，由此我们可以断定点 Y 在多边形内。同理，射线 X 分别与 AD 和 CD 都发生了穿越，因此点 X 在多边形外，而射线 Z 没有和多边形发生穿越，点 Z 位于多边形外。")]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("解决了第三点，这一点就毫无难度了。根据上面的假设，射线连续经过的两个顶点显然都位于射线以上的一侧，因此这种情况看作没有发生穿越就可以了。由于第三点的解决方案实际上已经覆盖到这种特例，因此不需要再做特别的处理。")])]),a("p",[t._v("这种简单直观的算法通常叫做"),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Point_in_polygon#Ray_casting_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("射线法")]),t._v("或"),a("strong",[t._v("奇偶法")]),t._v("，下面给出 JavaScript 的算法实现。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * @description 射线法判断点是否在多边形内部\n * @param {Object} p 待判断的点，格式：{ x: X 坐标, y: Y 坐标 }\n * @param {Array} poly 多边形顶点，数组成员的格式同 p\n * @return {String} 点 p 和多边形 poly 的几何关系\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("rayCasting")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" px "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      py "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      flag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sx "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sy "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tx "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ty "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 点与多边形顶点重合")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sx "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" px "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" sy "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" px "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ty "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'on'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 判断线段两端点是否在射线两侧")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sy "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" py "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ty "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sy "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" py "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ty "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 线段上与射线 Y 坐标相同的点的 X 坐标")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sx "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("py "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sy"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sx"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ty "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sy"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 点在多边形的边上")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" px"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'on'")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 射线穿过多边形的边界")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" px"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        flag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("flag\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 射线穿过多边形边界的次数为奇数时点在多边形内")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" flag "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'in'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'out'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("除了射线法还有很多其他的方法，下面再介绍一种"),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Point_in_polygon#Winding_number_algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("回转数法")]),t._v("。")]),a("p",[t._v("平面中的闭合曲线关于一个点的"),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Winding_number",target:"_blank",rel:"noopener noreferrer"}},[t._v("回转数")]),t._v("（又叫卷绕数），代表了曲线绕过该点的总次数。下面这张图动态演示了回转数的概念：图中红色曲线关于点（人所在位置）的回转数为 2。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/winding-number-animation.gif",alt:"回转数"}})]),a("p",[t._v("回转数是拓扑学中的一个基本概念，具有很重要的性质和用途。本文并不打算在这一点上展开论述，这需要具备相当的数学知识，否则会非常乏味和难以理解。我们暂时只需要记住回转数的一个特性就行了："),a("strong",[t._v("当回转数为 0 时，点在闭合曲线外部")]),t._v("（回转数大于 0 时所代表的含义，大家可以自己想一想，还是很有趣的）。")]),a("p",[t._v("对于给定的点和多边形，回转数应该怎么计算呢？")]),a("ol",[a("li",[t._v("用线段分别连接点和多边形的全部顶点。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/lines.png",alt:"顶点连线"}})]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("计算所有点与相邻顶点连线的夹角。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/angles-in.png",alt:"内部"}})]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("计算所有夹角和。注意每个夹角都是有方向的，所以有可能是负值。")])]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/angles-out.png",alt:"外部"}})]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("最后根据角度累加值计算回转数。看过前面的介绍，很容易理解 360°（2π）相当于一次回转。")])]),a("p",[t._v("思路介绍完了，下面两点是实现中需要留意的问题。")]),a("ol",[a("li",[t._v("JavaScript 的数只有 64 位双精度浮点这一种。对于三角函数产生的无理数，浮点数计算不可避免会造成一些误差，因此在最后计算回转数时需要做取整操作。")]),a("li",[t._v("通常情况下，平面直角坐标系内一个角的取值范围是 -π 到 π 这个区间，这也是 JavaScript 三角函数 "),a("code",[t._v("Math.atan2()")]),t._v(" 返回值的范围。但 JavaScript 并不能直接计算任意两条线的夹角，我们只能先计算两条线与 X 正轴夹角，再取两者差值。这个差值的结果就有可能超出 -π 到 π 这个区间，因此我们还需要处理差值超出取值区间的情况。")])]),a("p",[t._v("这里也给出回转数法的 JavaScript 实现。")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * @description 回转数法判断点是否在多边形内部\n * @param {Object} p 待判断的点，格式：{ x: X 坐标, y: Y 坐标 }\n * @param {Array} poly 多边形顶点，数组成员的格式同 p\n * @return {String} 点 p 和多边形 poly 的几何关系\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("windingNumber")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" px "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      py "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sx "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        sy "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tx "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        ty "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" poly"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 点与多边形顶点重合或在多边形的边上")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sx "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" px"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("px "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" tx"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sy "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("py "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" ty"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("px "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sx"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ty "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sy"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("py "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sy"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" sx"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'on'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 点与相邻顶点连线的夹角")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" angle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("atan2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sy "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sx "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" px"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("atan2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ty "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" py"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tx "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" px"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 确保夹角不超出取值范围（-π 到 π）")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("angle "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      angle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" angle "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("angle "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      angle "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" angle "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    sum "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" angle\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 计算回转数并判断点和多边形的几何关系")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("round")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("PI")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'out'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'in'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("最后给一个"),a("a",{attrs:{href:"https://myst729.github.io/point-in-polygon/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线演示")]),t._v("。")]),a("p",[t._v("补：也有人问到像下面这种复杂多边形有没有办法？答案是肯定的。至于为什么，就留给大家思考吧。")]),a("p",[a("img",{attrs:{src:"https://myst729.github.io/blog/images/2013/11/complex-polygon.png",alt:"Complex Polygon"}})])])}],!1,null,null,null);s.default=o.exports}}]);